
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import tkinter as tk
from time import sleep
from tkinter import ttk
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\KiZuH\OneDrive - Slovenská technická univerzita v Bratislave\FIIT_Stvrty_semester\PSIP\GUI_Folder\build\assets\frame0")

def relative_to_assets(path: str) -> Path:
   return ASSETS_PATH / Path(path)


# number = 69


class GUIApplication:
    def __init__(self):
        # Initialize the main window
        self.window = Tk()
        self.window.geometry("1200x750")
        self.window.configure(bg="#3A3333")
        self.window.resizable(False, False)

        # Variable to track the number
        self.number = 0  # Initialize number variable

        # Initialize the stats for the interfaces
        self.Ether_IN_interface_0 = 25
        self.IP_IN_interface_0 = 26
        self.ARP_IN_interface_0 = 27
        self.TCP_IN_interface_0 = 28
        self.UDP_IN_interface_0 = 29
        self.ICMP_IN_interface_0 = 30
        self.HTTP_IN_interface_0 = 31
        self.HTTPS_IN_interface_0 = 32
        self.Total_IN_interface_0 = 33


        self.Ether_OUT_interface_0 = 10
        self.IP_OUT_interface_0 = 20
        self.ARP_OUT_interface_0 = 69
        self.TCP_OUT_interface_0 = 1
        self.UDP_OUT_interface_0 = 2
        self.ICMP_OUT_interface_0 = 3
        self.HTTP_OUT_interface_0 = 4
        self.HTTPS_OUT_interface_0 = 5
        self.Total_OUT_interface_0 = 6

        self.Ether_IN_interface_1 = 7
        self.IP_IN_interface_1 = 8
        self.ARP_IN_interface_1 = 9
        self.TCP_IN_interface_1 = 10
        self.UDP_IN_interface_1 = 11
        self.ICMP_IN_interface_1 = 12
        self.HTTP_IN_interface_1 = 13
        self.HTTPS_IN_interface_1 = 14
        self.Total_IN_interface_1 = 15

        self.Ether_OUT_interface_1 = 16
        self.IP_OUT_interface_1 = 17
        self.ARP_OUT_interface_1 = 18
        self.TCP_OUT_interface_1 = 19
        self.UDP_OUT_interface_1 = 20
        self.ICMP_OUT_interface_1 = 21
        self.HTTP_OUT_interface_1 = 22
        self.HTTPS_OUT_interface_1 = 23
        self.Total_OUT_interface_1 = 24


        # Setup UI components
        self.setup_ui()

    def setup_ui(self):
        self.canvas = Canvas(
            self.window,
            bg="#3A3333",
            height=750,
            width=1200,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        self.canvas.place(x=0, y=0)
        self.canvas.create_rectangle(
            0.0,
            0.0,
            1200.0,
            68.0,
            fill="#D9D9D9",
            outline="")

        self.canvas.create_text(
            100.0,
            24.0,
            anchor="nw",
            text="Interface 1",
            fill="#2C1D1D",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            1016.0,
            24.0,
            anchor="nw",
            text="Interface 2",
            fill="#2C1D1D",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            100.0,
            84.0,
            anchor="nw",
            text="Ethernet II",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            131.0,
            119.0,
            anchor="nw",
            text="IP",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            123.0,
            155.0,
            anchor="nw",
            text="ARP",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            123.0,
            190.0,
            anchor="nw",
            text="TCP",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            123.0,
            226.0,
            anchor="nw",
            text="UDP",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            119.0,
            262.0,
            anchor="nw",
            text="ICMP",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            119.0,
            298.0,
            anchor="nw",
            text="HTTP",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            113.0,
            334.0,
            anchor="nw",
            text="HTTPS",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        # self.canvas.create_text(
        #     199.0,
        #     84.0,
        #     anchor="nw",
        #     text="00000",
        #     fill="#FFFFFF",
        #     font=("Inter", 16 * -1)
        # )

        # Create the text item and store its ID
        self.ether_out_eth0_id = self.canvas.create_text(
            199.0,
            84.0,
            anchor="nw",
            text=str(self.Ether_OUT_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        # self.canvas.create_text(
        #     199.0,
        #     120.0,
        #     anchor="nw",
        #     text="00000",
        #     fill="#FFFFFF",
        #     font=("Inter", 16 * -1)
        # )

        self.ip_out_eth0_id = self.canvas.create_text(
            199.0,
            120.0,
            anchor="nw",
            text=str(self.IP_OUT_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.arp_out_eth0_id = self.canvas.create_text(
            199.0,
            156.0,  # Y coordinate for ARP, assuming it follows directly after IP
            anchor="nw",
            text=str(self.ARP_OUT_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.tcp_out_eth0_id = self.canvas.create_text(
            199.0,
            192.0,  # Y coordinate for TCP
            anchor="nw",
            text=str(self.TCP_OUT_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.udp_out_eth0_id = self.canvas.create_text(
            199.0,
            228.0,  # Y coordinate for UDP
            anchor="nw",
            text=str(self.UDP_OUT_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.icmp_out_eth0_id = self.canvas.create_text(
            199.0,
            264.0,  # Y coordinate for ICMP
            anchor="nw",
            text=str(self.ICMP_OUT_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.http_out_eth0_id = self.canvas.create_text(
            199.0,
            300.0,  # Y coordinate for HTTP
            anchor="nw",
            text=str(self.HTTP_OUT_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.https_out_eth0_id = self.canvas.create_text(
            199.0,
            336.0,  # Y coordinate for HTTPS
            anchor="nw",
            text=str(self.HTTPS_OUT_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        # If you also need to create a total for OUT on interface 0
        self.total_out_eth0_id = self.canvas.create_text(
            199.0,
            372.0,  # Y coordinate for Total
            anchor="nw",
            text=str(self.Total_OUT_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.ether_in_eth0_id = self.canvas.create_text(
            21.0,
            84.0,  # Y coordinate for Ethernet II
            anchor="nw",
            text=str(self.Ether_IN_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.ip_in_eth0_id = self.canvas.create_text(
            21.0,
            120.0,  # Y coordinate for IP
            anchor="nw",
            text=str(self.IP_IN_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.arp_in_eth0_id = self.canvas.create_text(
            21.0,
            156.0,  # Y coordinate for ARP
            anchor="nw",
            text=str(self.ARP_IN_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.tcp_in_eth0_id = self.canvas.create_text(
            21.0,
            192.0,  # Y coordinate for TCP
            anchor="nw",
            text=str(self.TCP_IN_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.udp_in_eth0_id = self.canvas.create_text(
            21.0,
            228.0,  # Y coordinate for UDP
            anchor="nw",
            text=str(self.UDP_IN_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.icmp_in_eth0_id = self.canvas.create_text(
            21.0,
            264.0,  # Y coordinate for ICMP
            anchor="nw",
            text=str(self.ICMP_IN_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.http_in_eth0_id = self.canvas.create_text(
            21.0,
            300.0,  # Y coordinate for HTTP
            anchor="nw",
            text=str(self.HTTP_IN_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.https_in_eth0_id = self.canvas.create_text(
            21.0,
            336.0,  # Y coordinate for HTTPS
            anchor="nw",
            text=str(self.HTTPS_IN_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.total_in_eth0_id = self.canvas.create_text(
            21.0,
            372.0,  # Y coordinate for Total
            anchor="nw",
            text=str(self.Total_IN_interface_0),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            116.0,
            370.0,
            anchor="nw",
            text="TOTAL",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            100.0,
            404.0,
            anchor="nw",
            text="RESET",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_rectangle(
            163.0,
            401.0,
            185.0,
            425.0,
            fill="#000000",
            outline="")

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        self.button_1 = Button(
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.button1_clicked,  # Changed here
            relief="flat"
        )
        self.button_1.place(
            x=166.0,
            y=404.0,
            width=16.0,
            height=18.0
        )

        self.canvas.create_text(
            258.0,
            404.0,
            anchor="nw",
            text="CLEAR",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_rectangle(
            321.0,
            401.0,
            343.0,
            425.0,
            fill="#000000",
            outline="")

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        self.button_2 = Button(
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=self.button2_clicked,  # Changed here
            relief="flat"
        )
        self.button_2.place(
            x=324.0,
            y=404.0,
            width=16.0,
            height=18.0
        )

        self.canvas.create_text(
            1018.0,
            84.0,
            anchor="nw",
            text="Ethernet II",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            1049.0,
            119.0,
            anchor="nw",
            text="IP",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            1041.0,
            155.0,
            anchor="nw",
            text="ARP",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            1041.0,
            190.0,
            anchor="nw",
            text="TCP",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            1041.0,
            226.0,
            anchor="nw",
            text="UDP",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            1037.0,
            262.0,
            anchor="nw",
            text="ICMP",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            1037.0,
            298.0,
            anchor="nw",
            text="HTTP",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            1031.0,
            334.0,
            anchor="nw",
            text="HTTPS",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.ether_out_eth1_id = self.canvas.create_text(
            1117.0,
            84.0,  # Y coordinate for Ethernet II
            anchor="nw",
            text=str(self.Ether_OUT_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.ip_out_eth1_id = self.canvas.create_text(
            1117.0,
            120.0,  # Y coordinate for IP
            anchor="nw",
            text=str(self.IP_OUT_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.arp_out_eth1_id = self.canvas.create_text(
            1117.0,
            156.0,  # Y coordinate for ARP
            anchor="nw",
            text=str(self.ARP_OUT_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.tcp_out_eth1_id = self.canvas.create_text(
            1117.0,
            192.0,  # Y coordinate for TCP
            anchor="nw",
            text=str(self.TCP_OUT_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.udp_out_eth1_id = self.canvas.create_text(
            1117.0,
            228.0,  # Y coordinate for UDP
            anchor="nw",
            text=str(self.UDP_OUT_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.icmp_out_eth1_id = self.canvas.create_text(
            1117.0,
            264.0,  # Y coordinate for ICMP
            anchor="nw",
            text=str(self.ICMP_OUT_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.http_out_eth1_id = self.canvas.create_text(
            1117.0,
            300.0,  # Y coordinate for HTTP
            anchor="nw",
            text=str(self.HTTP_OUT_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.https_out_eth1_id = self.canvas.create_text(
            1117.0,
            336.0,  # Y coordinate for HTTPS
            anchor="nw",
            text=str(self.HTTPS_OUT_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.total_out_eth1_id = self.canvas.create_text(
            1117.0,
            372.0,  # Y coordinate for Total
            anchor="nw",
            text=str(self.Total_OUT_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.ether_in_eth1_id = self.canvas.create_text(
            939.0,
            84.0,  # Y coordinate for Ethernet II
            anchor="nw",
            text=str(self.Ether_IN_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.ip_in_eth1_id = self.canvas.create_text(
            939.0,
            120.0,  # Y coordinate for IP
            anchor="nw",
            text=str(self.IP_IN_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.arp_in_eth1_id = self.canvas.create_text(
            939.0,
            156.0,  # Y coordinate for ARP
            anchor="nw",
            text=str(self.ARP_IN_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.tcp_in_eth1_id = self.canvas.create_text(
            939.0,
            192.0,  # Y coordinate for TCP
            anchor="nw",
            text=str(self.TCP_IN_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.udp_in_eth1_id = self.canvas.create_text(
            939.0,
            228.0,  # Y coordinate for UDP
            anchor="nw",
            text=str(self.UDP_IN_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)

        )


        self.icmp_in_eth1_id = self.canvas.create_text(
            939.0,
            264.0,  # Y coordinate for ICMP
            anchor="nw",
            text=str(self.ICMP_IN_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.http_in_eth1_id = self.canvas.create_text(
            939.0,
            300.0,  # Y coordinate for HTTP
            anchor="nw",
            text=str(self.HTTP_IN_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.https_in_eth1_id = self.canvas.create_text(
            939.0,
            336.0,  # Y coordinate for HTTPS
            anchor="nw",
            text=str(self.HTTPS_IN_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.total_in_eth1_id = self.canvas.create_text(
            939.0,
            372.0,  # Y coordinate for Total
            anchor="nw",
            text=str(self.Total_IN_interface_1),
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            1034.0,
            370.0,
            anchor="nw",
            text="TOTAL",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            1018.0,
            404.0,
            anchor="nw",
            text="RESET",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_rectangle(
            1081.0,
            401.0,
            1103.0,
            425.0,
            fill="#000000",
            outline="")

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        self.button_3 = Button(
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=self.button3_clicked,  # Changed here
            relief="flat"
        )
        self.button_3.place(
            x=1084.0,
            y=404.0,
            width=16.0,
            height=18.0
        )

        self.canvas.create_text(
            547.0,
            22.0,
            anchor="nw",
            text="MAC Table",
            fill="#2D1D1D",
            font=("Inter", 20 * -1)
        )

        self.entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        self.entry_bg_1 = self.canvas.create_image(
            890.5,
            413.0,
            image=self.entry_image_1
        )
        self.entry_1 = Entry(
            bd=0,
            bg="#D9D9D9",
            fg="#000716",
            highlightthickness=0
        )
        self.entry_1.place(
            x=850.0,
            y=404.0,
            width=81.0,
            height=16.0
        )

        # Setup MAC address table
        self.setup_mac_table()
        self.add_mac_entry("FF", 1, 1)

        # Additional UI setup such as buttons for updating the number
        self.setup_number_controls()

    def button1_clicked(self):
        print("A button 1 was clicked!")

    def button2_clicked(self):
        print("A button 2 was clicked!")

    def button3_clicked(self):
        print("A button 3 was clicked!")

    def setup_mac_table(self):
        # MAC address table frame
        self.mac_frame = tk.Frame(self.window, bg="#3A3333", bd=0, highlightthickness=0, relief="ridge")
        self.mac_frame.place(x=275, y=75, width=650, height=325)

        # Columns for the MAC address table
        columns = ("MAC address", "Timer", "Port")
        self.mac_table = ttk.Treeview(self.mac_frame, columns=columns, show="headings")
        for col in columns:
            self.mac_table.heading(col, text=col)
            self.mac_table.column(col, anchor="center", width=233 if col == "MAC address" else 150)

        # Scrollbar for the MAC table
        scrollbar = ttk.Scrollbar(self.mac_frame, orient="vertical", command=self.mac_table.yview)
        self.mac_table.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side="right", fill="y")
        self.mac_table.pack(expand=True, fill="both")

    def add_mac_entry(self, mac_address, timer, port):
        self.mac_table.insert('', 'end', values=(mac_address, timer, port))

    def setup_number_controls(self):
        # Update number controls (e.g., buttons, labels)
        self.number_var = tk.StringVar(value=str(self.number))
        update_button = tk.Button(self.window, text="Update Number", command=self.update_number)
        update_button.place(relx=0.5, rely=0.9, anchor="center")

        number_label = tk.Label(self.window, textvariable=self.number_var, font=("Inter", 16), bg="#3A3333",
                                fg="#FFFFFF")
        number_label.place(relx=0.5, rely=0.95, anchor="center")

    def update_number(self):
        self.number += 1
        self.number_var.set(str(self.number))

    # def update_ether_interface_display(self):
    #     # Update the displayed value of Ether_IN_interface_0
    #     self.canvas.itemconfigure(self.ether_text_id, text=str(self.Ether_IN_interface_0))

    def run(self):
        self.window.mainloop()

# def run_gui():
#

#     # MAC address table
#
#     # Funkcia na pridanie záznamov do MAC tabuľky (budete musieť implementovať logiku podľa potreby)
#     def add_mac_entry(mac_address, timer, port):
#         mac_table.insert('', 'end', values=(mac_address, timer, port))
#
#     # Vytvorenie rámčeka pre MAC tabuľku
#     mac_frame = tk.Frame(canvas, bg="#3A3333", bd=0, highlightthickness=0, relief="ridge")
#     mac_frame.place(x=275, y=75, width=650, height=325)  # Zväčšenie šírky na 700
#
#     # Definovanie stĺpcov pre MAC tabuľku
#     columns = ("MAC address", "Timer", "Port")
#     mac_table = ttk.Treeview(mac_frame, columns=columns, show="headings")
#     for col in columns:
#         mac_table.heading(col, text=col)
#         # Zväčšenie šírky stĺpcov
#         mac_table.column(col, anchor="center", width=233 if col == "MAC address" else 150)
#
#     add_mac_entry("00:00:00:00:00:01", "00:00:00:00:00:01", "1")
#
#     # Pridanie scrollbaru
#     scrollbar = ttk.Scrollbar(mac_frame, orient="vertical", command=mac_table.yview)
#     mac_table.configure(yscrollcommand=scrollbar.set)
#     scrollbar.pack(side="right", fill="y")
#
#     # Umiestnenie tabuľky v rámčeku
#     mac_table.pack(expand=True, fill="both")
#
#
#     # Vytvorenie StringVar premennej, ktorá bude držať hodnotu premennej number
#     number_var = tk.StringVar(value=str(number))
#
#     # Funkcia na aktualizáciu hodnoty premennej number
#     def update_number():
#         global number
#         number += 1  # Pridáme 1 k aktuálnej hodnote
#         number_var.set(str(number))
#
#     # Tlačidlo pre aktualizáciu hodnoty premennej number
#     update_button = tk.Button(window, text="Update Number", command=update_number)
#     update_button.place(relx=0.5, rely=0.9, anchor="center")
#
#
#
#     # Vytvorenie Label widgetu pre zobrazenie hodnoty premennej number v spodnej časti okna
#     number_label = tk.Label(window, textvariable=number_var, font=("Inter", 16), bg="#3A3333", fg="#FFFFFF")
#     number_label.place(relx=0.5, rely=0.95, anchor="center")  # Umiestnenie na stred spodnej časti okna

